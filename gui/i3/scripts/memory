#!/usr/bin/env bash

# Minimal Memory Usage - Clean output
# Source utility functions from dotfiles
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$script_dir/polybar-utils.sh"

# Handle mouse clicks (simplified)
case $BLOCK_BUTTON in
    1) # Left click - show detailed memory info
        show_notification "Memory Information" "$(get_detailed_memory_info)" "normal" "5000"
        ;;
    3) # Right click - open htop
        if command -v htop >/dev/null 2>&1; then
            i3-msg -q exec "xfce4-terminal -e htop"
        fi
        ;;
esac

# Get memory information
mem_total=$(grep MemTotal /proc/meminfo | awk '{print $2}')
mem_available=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
mem_used=$((mem_total - mem_available))
mem_percentage=$((mem_used * 100 / mem_total))

# Convert to appropriate units
mem_used_bytes=$((mem_used * 1024))
mem_total_bytes=$((mem_total * 1024))

used_formatted=$(format_bytes "$mem_used_bytes")
total_formatted=$(format_bytes "$mem_total_bytes")

# Create Unicode block indicator (8 levels)
blocks="▁▂▃▄▅▆▇█"
block_index=$((mem_percentage * 7 / 100))
if [ $block_index -gt 7 ]; then block_index=7; fi
block_char=${blocks:$block_index:1}

# Subtle color coding based on usage levels
if [ $mem_percentage -le 60 ]; then
    color="#7fb069"  # Muted green for low memory usage
elif [ $mem_percentage -le 85 ]; then
    color="#d9b08c"  # Muted orange for medium memory usage
else
    color="#e57474"  # Muted red for high memory usage
fi

# Output with color and Unicode block
echo "${mem_percentage}% ${block_char}"
echo "${mem_percentage}% ${block_char}"
echo "$color"