#!/usr/bin/env bash

# Enhanced CPU Usage widget with polybar-style formatting
# Source utility functions
# Source utility functions from dotfiles
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$script_dir/polybar-utils.sh"

get_cpu_usage() {
    local cpu_line=$(grep "^cpu " /proc/stat)
    local prev_cpu_line=$(cat /tmp/cpu_stats 2>/dev/null || echo "$cpu_line")
    
    echo "$cpu_line" > /tmp/cpu_stats
    
    read -r _ user nice system idle iowait irq softirq steal _ <<< "$cpu_line"
    local total=$((user + nice + system + idle + iowait + irq + softirq + steal))
    local work=$((user + nice + system + irq + softirq + steal))
    
    read -r _ prev_user prev_nice prev_system prev_idle prev_iowait prev_irq prev_softirq prev_steal _ <<< "$prev_cpu_line"
    local prev_total=$((prev_user + prev_nice + prev_system + prev_idle + prev_iowait + prev_irq + prev_softirq + prev_steal))
    local prev_work=$((prev_user + prev_nice + prev_system + prev_irq + prev_softirq + prev_steal))
    
    local total_diff=$((total - prev_total))
    local work_diff=$((work - prev_work))
    
    if [ $total_diff -eq 0 ]; then
        echo "0"
    else
        echo $((work_diff * 100 / total_diff))
    fi
}

get_detailed_cpu_info() {
    echo "CPU Performance Details"
    echo "━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Model: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
    echo "Cores: $(nproc) cores / $(nproc --all) threads"
    echo "Current Frequency: $(get_cpu_frequency)"
    echo "Load Average: $(cut -d' ' -f1-3 /proc/loadavg)"
    
    if command -v sensors >/dev/null 2>&1; then
        local temp=$(sensors 2>/dev/null | grep -E "(Package id 0|Tctl|Core 0)" | head -1 | grep -oE '\+[0-9]+\.[0-9]+°C' | head -1)
        echo "Temperature: ${temp:-N/A}"
    fi
    
    echo ""
    echo "Per-Core Usage:"
    grep "^cpu[0-9]" /proc/stat | head -6 | while read -r line; do
        local core=$(echo "$line" | awk '{print $1}')
        echo "  $core: Active"
    done
    
    echo ""
    echo "Top CPU Processes:"
    ps -eo pid,pcpu,comm --sort=-pcpu | head -6 | tail -5
}

# Handle mouse clicks
case $BLOCK_BUTTON in
    1) # Left click - show detailed CPU info
        show_notification "$(get_detailed_cpu_info)" "" "normal" "10000"
        ;;
    2) # Middle click - toggle CPU governor
        if [ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ]; then
            current_gov=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
            case $current_gov in
                "powersave") new_gov="performance" ;;
                "performance") new_gov="schedutil" ;;
                *) new_gov="powersave" ;;
            esac
            echo "$new_gov" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor >/dev/null 2>&1
            show_notification "CPU Governor" "Switched to: $new_gov" "normal" "3000"
        fi
        ;;
    3) # Right click - open system monitor
        if command -v htop >/dev/null 2>&1; then
            i3-msg -q exec "xfce4-terminal -e htop"
        elif command -v top >/dev/null 2>&1; then
            i3-msg -q exec "xfce4-terminal -e top"
        fi
        ;;
    4) # Scroll up - show per-core usage
        show_notification "Per-Core CPU Usage" "$(grep '^cpu[0-9]' /proc/stat | head -6 | awk '{print $1 ": Active"}')" "normal" "5000"
        ;;
    5) # Scroll down - show CPU frequency details
        if [ -d /sys/devices/system/cpu/cpu0/cpufreq ]; then
            local min_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq 2>/dev/null)
            local max_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq 2>/dev/null)
            local cur_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq 2>/dev/null)
            
            if [ -n "$min_freq" ] && [ -n "$max_freq" ] && [ -n "$cur_freq" ]; then
                local min_ghz=$(echo "scale=2; $min_freq / 1000000" | bc)
                local max_ghz=$(echo "scale=2; $max_freq / 1000000" | bc)  
                local cur_ghz=$(echo "scale=2; $cur_freq / 1000000" | bc)
                show_notification "CPU Frequency Details" "Min: ${min_ghz}GHz\nMax: ${max_ghz}GHz\nCurrent: ${cur_ghz}GHz" "normal" "5000"
            fi
        fi
        ;;
esac

# Get CPU usage and frequency
cpu_usage=$(get_cpu_usage)
cpu_freq=$(get_cpu_frequency)

# Create modern progress bar
progress_bar=$(create_progress_bar "$cpu_usage" 8 "thin")

# Get appropriate color
color=$(get_threshold_color "$cpu_usage" false)

# Enhanced output format with Font Awesome icon using pango markup
echo "${FA_CPU} ${cpu_usage}% $progress_bar $cpu_freq"